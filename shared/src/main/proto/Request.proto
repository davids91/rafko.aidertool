
syntax = "proto3";
option java_package = "org.rafko.aidertool";
option java_outer_classname = "RequestDealer";

package AiderTool;

enum RequestResponse{
  QUERY_UNKNOWN = 0;
  QUERY_INVALID = 1;
  QUERY_REJECTED = 2;
  QUERY_CHANGED = 3;
  QUERY_OK = 4;
}

enum HelpState{
  STATE_UNKNOWN = 0;
  STATE_OPEN = 1; /* Request awaits helpers */
  STATE_POSTPONED = 2; /* Request either de-prioritized by requester, or tentatively accepted by a helper */
  STATE_ACTIVE = 3; /* Request is actively being worked on */
  STATE_PENDING = 4; /* Request marked finished either by the requester or a helper */
  STATE_FINISHED = 10; /* Request finished */
  STATE_CANCELLED = 11;
}

/**
 * Contains a request for help, complete with a unique ID and some tags,
 *  original requester and the userID of the user who last modified the request state
 *  (either a requester or someone who signaled to help ).
 */
message AidRequest{
  string requestID = 1;
  string requesterUUID = 2;
  string helperUUID = 3;
  string finalizedBy = 4;
  HelpState state = 10;
  repeated string tags = 11;
}

message AidToken{
  string requestID = 1;
  string UserUUID = 2;
  RequestResponse state = 10;
  repeated string tags = 11;
  repeated string data = 12;
}

service RequestHandler{
  /**
   * A request can be added any time
   */
  rpc add(AidRequest) returns (AidToken);

  /**
   * Open requests can be initiated by anyone other then the original requester.
   * A request can not be initiated if it is in states @STATE_UNKNOWN, @STATE_ACTIVE or @STATE_FINISHED
   * Initiate has different meanings in different states:
   * @STATE_OPEN
   *  -> Can only be initiated by a non-requester. Pushes the request state to be @STATE_ACTIVE
   * @STATE_POSTPONED
   *  //Not implemented yet//-> Can be initiated by anyone. If non-requester initiates it,
   *     the requester has to confirm it to push the request state to be @STATE_ACTIVE
   * @STATE_ACTIVE
   *  -> Can be initiated by requester only; Confirming that the request has been fulfilled
   * @STATE_PENDING
   *  -> Can be initiated by helper only. Both the requested and the helper needs to confirm
   *     in order to push the state to @STATE_FINISHED
   */
  rpc initiate(AidToken) returns (AidToken);

  /**
   * Any request can be cancelled at any state, but only by the requester.
   */
  rpc cancel(AidToken) returns (AidToken);

  /**
   * Requests can be postponed by
   *  -> The requester: signaling that there is a low priority of the postponed request
   *  //Not implemented yet// -> Non-requester: signaling that help will be on its way shortly
   *  Requests can be postponed in the @STATE_OPEN and @STATE_ACTIVE states.
   *  //Not implemented yet// Postponing the request by a non-requester updates the @helperUUID of the request.
   */
  rpc postpone(AidToken) returns (AidToken);

  /**
   * Finalizing a request means help was provided and accepted; THe underlying issue is solved
   * or not solvable in the near future. A request can be finalized in the following states:
   * -> @STATE_ACTIVE : by the requester, this puts the request to @STATE_PENDING
   * -> @STATE_PENDING : by the helper, this puts the request to @STATE_FINISHED
   */
  rpc finalize(AidToken) returns (AidToken);

  rpc ping(AidToken) returns (AidToken);
  rpc queryRequest(AidToken) returns (AidToken);
  rpc queryRequests(AidToken) returns (stream AidRequest);
  rpc queryRequestsChanged(AidToken) returns (AidToken);
  rpc queryTags(AidToken) returns (AidToken); /* empty tags field means all tags */
}